{
  "name": "dwebp-bin",
  "version": "0.1.6",
  "description": "dwebp node.js wrapper that convert WebP into PNG",
  "bin": {
    "dwebp": "cli.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/1000ch/node-dwebp-bin.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 75000",
    "postinstall": "node lib/install.js"
  },
  "bugs": {
    "url": "https://github.com/1000ch/node-dwebp-bin/issues"
  },
  "homepage": "https://github.com/1000ch/node-dwebp-bin",
  "author": {
    "name": "1000ch",
    "email": "shogo.sensui@gmail.com",
    "url": "https://github.com/1000ch"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "dependencies": {
    "bin-build": ">=1.0.0",
    "bin-wrapper": ">=1.0.0",
    "log-symbols": ">=1.0.0"
  },
  "devDependencies": {
    "bin-check": ">=1.0.0",
    "mocha": ">=1.18.2",
    "rimraf": ">=2.2.6"
  },
  "files": [
    "lib",
    "cli.js",
    "index.js"
  ],
  "keywords": [
    "image",
    "img",
    "jpg",
    "jpeg",
    "png",
    "gif",
    "webp"
  ],
  "readme": "# [node-dwebp-bin](https://www.npmjs.org/package/dwebp-bin)\n\n[![Build Status](https://travis-ci.org/1000ch/node-dwebp-bin.svg?branch=master)](https://travis-ci.org/1000ch/node-dwebp-bin)\n[![NPM version](https://badge.fury.io/js/dwebp-bin.svg)](http://badge.fury.io/js/dwebp-bin)\n[![Dependency Status](https://david-dm.org/Abysim/node-dwebp-bin.svg)](https://david-dm.org/1000ch/node-dwebp-bin)\n[![devDependency Status](https://david-dm.org/Abysim/node-dwebp-bin/dev-status.svg)](https://david-dm.org/1000ch/node-dwebp-bin#info=devDependencies)\n\n## Dependencies on Linux\n\nWebP requires following libraries on Linux. See [detail](https://developers.google.com/speed/webp/docs/compiling#compiling_on_unix-like_platforms).\n\n```sh\n$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev libgif-dev\n```\n\n## Install\n\n```sh\n$ npm install --save dwebp-bin\n```\n\n## Usage\n\n### Command Line\n\n```sh\n$ dwebp input.webp -o output.png\n```\n\n### From source file\n\n```js\nvar execFile = require('child_process').execFile;\nvar dwebp = require('dwebp-bin').path;\n\nexecFile(dwebp, ['input.webp', '-o', 'output.png'], function (error) {\n  if (error) {\n    throw error;\n  }\n\n  console.log('Image was converted');\n});\n```\n\n### Options\n\n```sh\nUsage: dwebp in_file [options] [-o out_file]\n\nDecodes the WebP image file to PNG format [Default]\nUse following options to convert into alternate image formats:\n  -pam ......... save the raw RGBA samples as a color PAM\n  -ppm ......... save the raw RGB samples as a color PPM\n  -bmp ......... save as uncompressed BMP format\n  -tiff ........ save as uncompressed TIFF format\n  -pgm ......... save the raw YUV samples as a grayscale PGM\n                 file with IMC4 layout\n  -yuv ......... save the raw YUV samples in flat layout\n\n Other options are:\n  -version  .... print version number and exit\n  -nofancy ..... don't use the fancy YUV420 upscaler\n  -nofilter .... disable in-loop filtering\n  -nodither .... disable dithering\n  -dither <d> .. dithering strength (in 0..100)\n  -mt .......... use multi-threading\n  -crop <x> <y> <w> <h> ... crop output with the given rectangle\n  -scale <w> <h> .......... scale the output (*after* any cropping)\n  -flip ........ flip the output vertically\n  -alpha ....... only save the alpha plane\n  -incremental . use incremental decoding (useful for tests)\n  -h     ....... this help message\n  -v     ....... verbose (e.g. print encoding/decoding times)\n  -noasm ....... disable all assembly optimizations\n```\n\n## License\n\nThis is licensed under BSD.\n\nWebP is licensed under [Creative Commons Attribution 3.0 License](http://creativecommons.org/licenses/by/3.0/).\n",
  "readmeFilename": "readme.md",
  "_id": "dwebp-bin@0.1.6",
  "_shasum": "f10f3ad4d56cba74efb19c32b41f88a42162e965",
  "_resolved": "git://github.com/Abysim/node-dwebp-bin.git#ea949b23bd28739c6f0a1b8fe9daeb00541de9a3",
  "_from": "dwebp-bin@git://github.com/Abysim/node-dwebp-bin.git"
}
